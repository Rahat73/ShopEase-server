// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        Role
  isSuspended Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin    Admin?
  vendor   Vendor?
  customer Customer?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phone        String
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id              String   @id @default(uuid())
  email           String   @unique
  shopName        String
  shopLogo        String?
  shopDescription String
  phone           String
  address         String
  isBlacklisted   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User      @relation(fields: [email], references: [email])
  product Product[]

  order Order[]
  cart  Cart[]

  @@map("vendors")
}

model Customer {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  phone        String?
  profilePhoto String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  order  Order[]
  review Review[]
  cart   Cart?

  @@map("customers")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String
  price          Float
  discount       Float    @default(0)
  inventoryCount Int
  images         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  orderItem OrderItem[]
  review    Review[]
  cartItem  CartItem[]

  @@map("products")
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Float       @default(0)
  discount    Float       @default(0)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  quantity Int
  price    Float @default(0)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@id([orderId, productId])
  @@map("order_items")
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]

  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  @@map("carts")
}

model CartItem {
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
